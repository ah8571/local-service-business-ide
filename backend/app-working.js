// Load environment variables
require('dotenv').config();

const express = require('express');
const path = require('path');
const cors = require('cors');

// Import LLM Router
const LLMRouter = require('./services/simple-llmRouter');

const app = express();
const PORT = process.env.PORT || 5000;

// Initialize LLM Router
const llmRouter = new LLMRouter();

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Serve static files from frontend directory
app.use(express.static(path.join(__dirname, '../frontend')));

// Serve temporary assets for website previews
app.use('/assets', express.static(path.join(__dirname, '../generated_sites/temp_assets')));

// Business generation endpoint
app.post('/api/generate', async (req, res) => {
    try {
        console.log('Business generation endpoint hit!');
        const { businessData, aiAgent = 'grok' } = req.body;
        
        console.log(`Using AI Agent: ${aiAgent}`);
        console.log('Business Data:', businessData);

        // Create business prompt
        const businessPrompt = `You are a professional web developer. Create a complete, professional website for "${businessData.businessName}".

BUSINESS INFORMATION:
- Company: ${businessData.businessName}
- Services: ${businessData.services}  
- Service Area: ${businessData.serviceArea}
${businessData.location ? `- Address: ${businessData.location}` : ''}
- Phone: ${businessData.phone}
${businessData.email ? `- Email: ${businessData.email}` : ''}
${businessData.hours ? `- Hours: ${businessData.hours}` : ''}

IMPORTANT REQUIREMENTS:
- Use current year (2025) for any copyright notices
- Create a modern, professional design
- Include responsive design and mobile optimization
- IMPORTANT: Add smooth scrolling CSS: html { scroll-behavior: smooth; }
- IMPORTANT: Include a subtle footer credit "Powered by Connectedism" with link to https://connectedism.com - style it discretely but visibly
- IMPORTANT: Include HTML comment in head: <!-- Generated by Connectedism - AI-powered website builder - https://connectedism.com -->
- IMPORTANT: Include meta tag: <meta name="generator" content="Connectedism AI Website Builder">
- Please respond with ONLY the complete HTML code. Start with <!DOCTYPE html> and end with </html>. Do not include any explanations, code blocks, or markdown formatting - just the raw HTML code that can be directly used in a browser.

Generate ONLY the complete HTML code with no additional text or explanations:`;

        let response;
        try {
            response = await llmRouter.callProvider(aiAgent, businessPrompt);
        } catch (error) {
            console.log('AI provider error:', error.message);
            
            const errorResponse = {
                success: false,
                error: `AI Provider Error: ${error.message}`,
                troubleshooting: [
                    "Check if your API keys are properly configured in the .env file",
                    "Verify your API provider quotas and billing status",
                    "Try a different AI provider from the dropdown",
                    "Check your internet connection"
                ],
                businessData: businessData
            };
            
            return res.status(500).json(errorResponse);
        }
        
        if (response && response.content) {
            console.log('Website generated successfully');
            
            res.json({
                success: true,
                html: response.content,
                message: 'Website generated successfully!',
                agent: aiAgent,
                provider: response.provider || aiAgent
            });
        } else {
            console.error('No content in response');
            res.status(500).json({ error: 'Failed to generate website' });
        }

    } catch (error) {
        console.error('Error in generate:', error);
        res.status(500).json({ error: 'Internal server error: ' + error.message });
    }
});

// Chat endpoint for website editing
app.post('/api/chat', async (req, res) => {
    try {
        console.log('Chat endpoint hit!');
        const { prompt, businessData, currentHtml, aiAgent = 'grok', imageData } = req.body;
        
        console.log(`Using AI Agent: ${aiAgent}`);
        console.log(`Prompt: ${prompt}`);
        console.log(`Has Image: ${!!imageData}`);

        // Create enhanced prompt for website editing
        let enhancedPrompt = `You are a helpful website developer assistant. You are directly helping the user edit their website for ${businessData ? businessData.businessName : 'their business'}. 

Current website HTML:
${currentHtml}

User request: ${prompt}

IMPORTANT INSTRUCTIONS:
- Respond directly to the user (use "I", "you", "your website") 
- DO NOT speak in third person about "the user"
- If images are provided, try to incorporate them into the website by creating placeholder IMG tags with descriptive alt text
- For images, use placeholder URLs like "images/hero-image.jpg" or "assets/logo.png" with appropriate alt text
- Always provide the complete updated HTML code in the specified format`;

        // Handle image data efficiently to avoid rate limits
        let imagePath = null;
        if (imageData) {
            // Save image file locally and use file reference instead of sending full data to AI
            const fs = require('fs').promises;
            const crypto = require('crypto');
            
            try {
                // Create unique filename
                const imageId = crypto.randomBytes(8).toString('hex');
                const extension = imageData.mimeType ? imageData.mimeType.split('/')[1] : 'jpg';
                const fileName = `uploaded-${imageId}.${extension}`;
                imagePath = `assets/${fileName}`;
                
                // Ensure assets directory exists
                const assetsDir = path.join(__dirname, '../generated_sites/temp_assets');
                await fs.mkdir(assetsDir, { recursive: true });
                
                // Save image file
                const imageBuffer = Buffer.from(imageData.data, 'base64');
                await fs.writeFile(path.join(assetsDir, fileName), imageBuffer);
                
                console.log(`‚úÖ Image saved: ${fileName}`);
                
                // Add efficient image context for AI (no base64 data)
                enhancedPrompt += `

IMPORTANT - Image Integration: The user has uploaded an image that should be incorporated into the website.
1. Use this image path: "${imagePath}"
2. Create an IMG tag: <img src="${imagePath}" alt="[descriptive alt text]" style="width: 100%; max-width: 600px; height: auto; border-radius: 8px;">
3. Position the image appropriately (hero section, gallery, etc.)
4. Apply proper responsive styling
5. Tell the user what you've done with their image

The image has been saved and is ready to use in the website.`;

            } catch (imageError) {
                console.log('‚ùå Image processing error:', imageError.message);
                // Fallback to data URI if file saving fails
                enhancedPrompt += `

IMPORTANT - Image Integration: You have been provided with an image.
1. Use this data URI: data:${imageData.mimeType || 'image/jpeg'};base64,${imageData.data.substring(0, 100)}...[truncated]
2. Create IMG tags using "assets/uploaded-image.jpg" as placeholder path
3. Tell the user the image will be included when they download the website`;
            }
        }

        let response;
        try {
            // Only send imageData to AI if we couldn't save the file locally
            const aiImageData = imagePath ? null : imageData;
            response = await llmRouter.callProvider(aiAgent, enhancedPrompt, aiImageData);
        } catch (providerError) {
            console.log('AI provider error for chat:', providerError.message);
            
            const errorMessage = `**AI Provider Issue**: ${providerError.message}

**Troubleshooting Steps:**
‚Ä¢ Check if API keys are configured in the .env file
‚Ä¢ Verify API provider quotas and billing status  
‚Ä¢ Try switching to a different AI provider
‚Ä¢ Check network connectivity

**Available Actions:**
‚Ä¢ Switch to another AI agent using the dropdown below
‚Ä¢ Try your request again after checking the above
‚Ä¢ Contact support if the issue persists`;

            return res.json({ 
                success: true, 
                response: errorMessage,
                agent: aiAgent,
                provider: 'Error Handler',
                isError: true
            });
        }
        
        if (response && response.content) {
            console.log('Chat response generated successfully');
            console.log('Response content preview:', response.content.substring(0, 200) + '...');
            
            // Extract HTML and explanation from the response
            const extractedHtml = extractHtmlFromResponse(response.content);
            const explanation = extractExplanationFromResponse(response.content);
            
            console.log('Extracted HTML length:', extractedHtml ? extractedHtml.length : 0);
            console.log('Extracted explanation length:', explanation ? explanation.length : 0);
            
            // Debug: Check what image references Gemini created
            if (extractedHtml && imageData) {
                const imgTags = extractedHtml.match(/<img[^>]*src="([^"]*)"[^>]*>/gi);
                if (imgTags) {
                    console.log('üñºÔ∏è  Gemini created image tags:', imgTags.length);
                    imgTags.forEach((tag, i) => {
                        const srcMatch = tag.match(/src="([^"]*)"/);
                        if (srcMatch) {
                            console.log(`   Image ${i + 1}: ${srcMatch[1]}`);
                        }
                    });
                } else {
                    console.log('‚ö†Ô∏è  No image tags found in Gemini response despite image upload');
                }
            }
            
            if (extractedHtml) {
                // This is a website update with HTML
                console.log('Sending HTML update to frontend');
                res.json({ 
                    success: true, 
                    html: extractedHtml,
                    message: explanation || 'Website updated successfully!',
                    agent: aiAgent,
                    provider: response.provider,
                    isWebsiteUpdate: true
                });
            } else {
                // This is a regular chat response
                console.log('Sending regular chat response to frontend');
                res.json({ 
                    success: true, 
                    response: response.content,
                    agent: aiAgent,
                    provider: response.provider
                });
            }
        } else {
            console.error('No content in chat response');
            res.status(500).json({ error: 'Failed to generate response' });
        }
        
    } catch (error) {
        console.error('Error in chat:', error);
        res.status(500).json({ error: 'Internal server error: ' + error.message });
    }
});

// Test AI connection endpoint
app.get('/api/test-ai', async (req, res) => {
    try {
        const aiAgent = req.query.agent || 'grok';
        const testPrompt = "Please respond with 'AI connection successful' if you can read this message.";
        
        console.log(`Testing AI connection for agent: ${aiAgent}`);
        
        const response = await llmRouter.callProvider(aiAgent, testPrompt);
        
        if (response && response.content) {
            res.json({
                success: true,
                message: 'AI connection successful',
                agent: aiAgent,
                provider: response.provider || aiAgent,
                response: response.content
            });
        } else {
            res.status(500).json({
                success: false,
                error: 'No response from AI provider',
                agent: aiAgent
            });
        }
    } catch (error) {
        console.error('AI test error:', error);
        res.status(500).json({
            success: false,
            error: error.message,
            agent: req.query.agent || 'grok'
        });
    }
});

// Helper functions for extracting HTML and explanations
function extractHtmlFromResponse(content) {
    if (!content) return null;
    
    // Look for HTML content between HTML_START: and HTML_END: markers
    const htmlStartMatch = content.match(/HTML_START:\s*([\s\S]*?)\s*HTML_END:/i);
    if (htmlStartMatch) {
        return htmlStartMatch[1].trim();
    }
    
    // Look for complete HTML document (starts with <!DOCTYPE html>)
    const doctypeMatch = content.match(/(<!DOCTYPE html>[\s\S]*<\/html>)/i);
    if (doctypeMatch) {
        return doctypeMatch[1].trim();
    }
    
    // Look for HTML tag content
    const htmlMatch = content.match(/(<html[\s\S]*<\/html>)/i);
    if (htmlMatch) {
        return `<!DOCTYPE html>\n${htmlMatch[1].trim()}`;
    }
    
    return null;
}

function extractExplanationFromResponse(content) {
    if (!content) return null;
    
    // Look for explanation between EXPLANATION: and HTML_START: markers
    const explanationMatch = content.match(/EXPLANATION:\s*([\s\S]*?)\s*HTML_START:/i);
    if (explanationMatch) {
        return explanationMatch[1].trim();
    }
    
    // If no structured format, look for text before HTML content
    const beforeHtmlMatch = content.match(/^([\s\S]*?)(?=<!DOCTYPE|<html)/i);
    if (beforeHtmlMatch && beforeHtmlMatch[1].trim()) {
        return beforeHtmlMatch[1].trim();
    }
    
    return null;
}

// Catch-all route to serve index.html
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/index.html'));
});

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ Server running at http://localhost:${PORT}`);
    console.log('‚úÖ Full AI-powered server started successfully');
    console.log('üìä Available endpoints:');
    console.log('  - POST /api/generate (business website generation)');
    console.log('  - POST /api/chat (website editing with images)');  
    console.log('  - GET /api/test-ai (test AI connectivity)');
});